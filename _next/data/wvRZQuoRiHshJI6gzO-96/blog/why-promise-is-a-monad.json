{"pageProps":{"article":{"title":"Why promise IS a monad","id":"why-promise-is-a-monad","file":"<p class=\"c1\"><span>Because I program in haskell, I have a lot of experience with monads, and now I see monads wherever I go. Monads are truly everywhere. Many people have already interacted with monads without even realising it. In fact, Javascript&#39;s promise is a monad. Despite this, the first result on google search for &quot;is promise a monad&quot;, is titled,</span><span class=\"c4\"><a class=\"c5\" href=\"https://www.google.com/url?q=https://buzzdecafe.github.io/2018/04/10/no-promises-are-not-monads&amp;sa=D&amp;source=editors&amp;ust=1617898032999000&amp;usg=AOvVaw3HVgMpZecXYXrPEFCNnAFI\">&nbsp;&quot;no, promise is not a monad&quot;</a></span><span class=\"c0\">. I see this blog post as a response to that article. In this post by Buzz De Cafe, the author claims that javascript&#39;s promise is not a monad because it does not follow the mathematical laws of monads. However, nobody in haskell actually uses moands in the mathematical sense. It doesn&#39;t really matter if Promise is a mathematical monad, what really matters is if it acts like a programming monad, which it does. For example, let&#39;s take the haskell function </span></p><p class=\"c1 c2\"><span class=\"c0\"></span></p><p class=\"c1\"><span class=\"c0\"><AceCodeViewer children='\n\n\n\nsequence :: (Traversable t, Monad m) =&gt; t (m a) -&gt; m (t a)\n\n\n\n' language='haskell' />\n\nWhen I saw this, I was struck by how similar it is to Javascript&#39;s\n\n\n\n<AceCodeViewer children='\n\n\n\nPromise.all ::[promise a] -&gt; promise [a]\n\n' language='haskell' />\n\nI have written the type signature of Javascript&#39;s Promise.all in haskell syntax to lay apparent how similar these two functions are. Also let us look at .then vs &gt;&gt;=\n\n\n\n\n\n<AceCodeViewer children='\n\n\n\n&nbsp;(&gt;&gt;=) :: Monad m =&gt; m a -&gt; (a -&gt; m b) -&gt; m b\n\n' language='haskell' />\n\n\n\n<AceCodeViewer children='\n\n\n\nfetch(url)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.then(data=&gt; data.json())\n\n' language='javascript' />\n\nBoth haskell&#39;s bind operator &gt;&gt;= and javascript .then extract the internal value of a monad. And let me remind the reader, that &gt;&gt;= is the minimal operator for the monad typeclass in haskell, so if promise were defined in haskell, all one would have to do is\n\n\n\n`<AceCodeViewer children='\n\ninstance Monad Promise where\n\n&nbsp; &nbsp; &nbsp;(&gt;&gt;=) = (then)\n\n' language='haskell' /></span></p><p class=\"c1 c2\"><span class=\"c0\"></span></p><p class=\"c1\"><span class=\"c0\">It is obvious that Promise has all the characteristics of a Monad, so when haskellers complain that it does not obey some mathematical law, those are just sprinklings on top of a monad that don&#39;t really affect its functionality. &nbsp;</span></p><p class=\"c1 c2\"><span class=\"c0\"></span></p><p class=\"c1\"><span class=\"c0\">Some people may knock Javascript for not being as intellectual or high level as Haskell, but in fact it has almost all of the same structures, just with not as mathematical names. The example of Javascript&#39;s Promise being a monad shows that it is truly a high level language. </span></p><p class=\"c1 c2\"><span class=\"c0\"></span></p><p class=\"c1 c2\"><span class=\"c0\"></span></p><p class=\"c1 c2\"><span class=\"c0\"></span></p>","style":"ol{margin:0;padding:0}table td,table th{padding:0}.c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:\"Arial\";font-style:normal}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c4{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c3{background-color:#ffffff;max-width:439.2pt;padding:72pt 86.4pt 72pt 86.4pt}.c5{color:inherit;text-decoration:inherit}.c2{height:11pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:\"Arial\"}p{margin:0;color:#000000;font-size:11pt;font-family:\"Arial\"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}","date":"2021-04-07T16:34:51.668Z"},"length":3},"__N_SSG":true}