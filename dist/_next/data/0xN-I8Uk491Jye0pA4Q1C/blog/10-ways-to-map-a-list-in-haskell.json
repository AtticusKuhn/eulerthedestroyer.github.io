{"pageProps":{"rawText":"Since haskell is a list-based language, there are many ways to work with lists. This article details some of the most interesting ways to multiply each number in a list by 5. 1. The Imperative way\n\n2. The boring way\n\n\n3. currying\n\n\n4. monad\n\n\n5. short functor\n\n\n6. List comprehension\n\n\n\n\n\n\n7. Do notation\n\n\n\n\n8. Functor\n\n\n9. Applicative\n\n\n10. Recursion\n","article":{"title":"10 ways to map a list in haskell","id":"10-ways-to-map-a-list-in-haskell","file":"<p class=\"c3\"><span style=\"overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 556.00px; height: 252.50px;\"><img alt=\"Haskell - Wikibooks, open books for an open world\" src=\"https://lh4.googleusercontent.com/sDaVhM-mh0ejojPHP8OfDTyslk3aVHCZWxkd8A5whmbZeIV-c3uP_tNXGcXKBA1-vJVtumfRF1rW8XvERl-cipvsUPEgsZFNwl_mcbUtAR-zBqajhsqUrlFj5WUj6TFHIA\" style=\"width: 556.00px; height: 252.50px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);\" title=\"\"></span></p><p class=\"c3\"><span class=\"c1\">Since haskell is a list-based language, there are many ways to work with lists. This article details some of the most interesting ways to multiply each number in a list by 5. </span></p><h1 class=\"c2\" id=\"h.gt9po4qkvkke\"><span class=\"c0\">1. The Imperative way</span></h1><p class=\"c3\"><span class=\"c1\"><CodeViewer children='\n\nmain:: IO()\n\nmain = do\n\n&nbsp; mutable &lt;- M.replicate 256 1\n\n&nbsp; forM_ ([1..256] z-&gt;\n\n&nbsp; &nbsp; modify mutable (x-&gt;x*5) z\n\n&nbsp; &nbsp;)\n\n' language='haskell' />\n\n<h1 class=\"c2\" id=\"h.suur5ro5psut\">2. The boring way\n</h1><CodeViewer children='\n\nmultiplyList :: [Int] -&gt; [Int]\n\nmultiplyList xs = map (\\x-&gt;x*5) xs\n\n' language='haskell' />\n\n<h1 class=\"c2\" id=\"h.paupqahaafxs\">3. currying\n</h1><CodeViewer children='\n\nmultiplyList :: [Int] -&gt; [Int]\n\nmultiplyList = map (*5) \n\n' language='haskell' />\n\n<h1 class=\"c2\" id=\"h.y7ycui8o06u\">4. monad\n</h1><CodeViewer children='\n\nmultiplyList :: [Int] -&gt; [Int]\n\nmultiplyList xs = &nbsp;xs &gt;&gt;= (\\x -&gt; [x*5])\n\n' language='haskell' />\n\n<h1 class=\"c2\" id=\"h.q0to0gfn5spa\">5. short functor\n</h1><CodeViewer children='\n\nm=(&lt;$&gt;)(*5)\n\n' language='haskell' />\n\n<h1 class=\"c2\" id=\"h.jqrdkmd2ug96\">6. List comprehension\n</h1><CodeViewer children='\n\nmultiplyList :: [Int] -&gt; [Int]\n\nmultiplyList xs = [x*5 | x &lt;- xs]\n\n' language='haskell' />\n\n\n\n\n\n<h1 class=\"c2\" id=\"h.91wil0pi5vjp\">7. Do notation\n</h1><CodeViewer children='\n\nmultiplyList :: [Int] -&gt; [Int]\n\nmultiplyList xs = do\n\n&nbsp; &nbsp; x &lt;- xs\n\n&nbsp; &nbsp; return $ x*5\n\n' language='haskell' />\n\n\n\n<h1 class=\"c2\" id=\"h.d0j6ueyqe1xx\">8. Functor\n</h1><CodeViewer children='\n\nmultiplyList :: [Int] -&gt; [Int]\n\nmultiplyList xs = fmap (\\x -&gt; x*5) xs\n\n' language='haskell' />\n\n<h1 class=\"c2\" id=\"h.umf6qv62289t\">9. Applicative\n</h1><CodeViewer children='\n\nmultiplyList :: [Int] -&gt; [Int]\n\nmultiplyList xs = &nbsp;pure (\\x-&gt;x*5) &lt;*&gt; xs\n\n' language='haskell' />\n\n<h1 class=\"c2\" id=\"h.d86hfb17ci1n\">10. Recursion\n</h1><CodeViewer children='\n\nmultiplyList :: [Int] -&gt; [Int]\n\nmultiplyList [] = []\n\nmultiplyList (x:xs) = (x*5) : multiplyList xs\n\n' language='haskell' /></span></p><p class=\"c3 c4\"><span class=\"c1\"></span></p><p class=\"c3 c4\"><span class=\"c1\"></span></p><p class=\"c3 c4\"><span class=\"c1\"></span></p><p class=\"c3 c4\"><span class=\"c1\"></span></p><p class=\"c3 c4\"><span class=\"c1\"></span></p>","style":"ol{margin:0;padding:0}table td,table th{padding:0}.c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:\"Arial\";font-style:normal}.c2{padding-top:20pt;padding-bottom:6pt;line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c1{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:\"Arial\";font-style:normal}.c3{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c5{background-color:#ffffff;max-width:439.2pt;padding:72pt 86.4pt 72pt 86.4pt}.c4{height:11pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:\"Arial\"}p{margin:0;color:#000000;font-size:11pt;font-family:\"Arial\"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}","images":["https://lh4.googleusercontent.com/sDaVhM-mh0ejojPHP8OfDTyslk3aVHCZWxkd8A5whmbZeIV-c3uP_tNXGcXKBA1-vJVtumfRF1rW8XvERl-cipvsUPEgsZFNwl_mcbUtAR-zBqajhsqUrlFj5WUj6TFHIA"],"image":"https://lh4.googleusercontent.com/sDaVhM-mh0ejojPHP8OfDTyslk3aVHCZWxkd8A5whmbZeIV-c3uP_tNXGcXKBA1-vJVtumfRF1rW8XvERl-cipvsUPEgsZFNwl_mcbUtAR-zBqajhsqUrlFj5WUj6TFHIA","date":"2021-05-02T18:04:22.678Z","description":"Since haskell is a list-based language, there..."},"length":1,"reccomendedArticles":[{"title":"How infinite sets could work in haskell","id":"how-infinite-sets-could-work-in-haskell","description":"I recently found out, very sadly, that...","image":"https://lh3.googleusercontent.com/l6wMZ9VJqFC50VgZrVa8_Avri7Hy9dcXzhLE_K9eADOh-R_ga3r7cBkeCaUtqeJFnNEVXe9JvZ0MfLK9iMgsLfQcwxKDMbTkMuJWHtsGowuOkTBO7TDS3vrzEphSjS-pPQ"},{"title":"My favourite Programming languages","id":"my-favourite-programming-languages","description":"With so many different programming languages and...","image":"https://lh5.googleusercontent.com/wjRFz0YBhe0izdpwfZe-2KNt1auP1jno9SPnORGgz0kP7SCGXcBaIhsxiyZ4jmoDK1s6Ig1ESVGUx33MBkJ01sIh7IRYaiypWJUloBmYgWpYKjHu4oAc-rEVZyYTja30ow"},{"title":"Top 3 reasons I love next.js","id":"top-3-reasons-i-love-next.js","description":"I built this site using Next.js, a...","image":"https://lh3.googleusercontent.com/rv18ZPIWd9eEvGR_SiIaZXBJR6deHQOQXeHjiF-5lYQpkCII80m6-VGCra2re2Hq5tg3KerXbGtsg03xDwN80rkOSSxHCcRFwlzgH2hG-9MjQ8JdFewLGtlPJoJknERicQ"}],"seo":{"title":"10 ways to map a list in haskell","description":"Since haskell is a list-based language, there...","openGraph":{"title":"10 ways to map a list in haskell","description":"Since haskell is a list-based language, there...","url":"https://eulerthedestroyer.github.io/blog/10-ways-to-map-a-list-in-haskell","type":"article","images":[{"url":"https://lh4.googleusercontent.com/sDaVhM-mh0ejojPHP8OfDTyslk3aVHCZWxkd8A5whmbZeIV-c3uP_tNXGcXKBA1-vJVtumfRF1rW8XvERl-cipvsUPEgsZFNwl_mcbUtAR-zBqajhsqUrlFj5WUj6TFHIA","width":800,"height":600,"alt":"10 ways to map a list in haskell"}],"article":{"publishedTime":"2021-05-02T18:04:22.678Z","authors":["https://eulerthedestroyer.github.io"],"tags":["coding","programming","hacking","cryptocurrency","javascript","python","haskell"]}}}},"__N_SSG":true}